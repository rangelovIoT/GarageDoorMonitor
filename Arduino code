#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <HTTPClient.h>
#include <NimBLEDevice.h> // Lighter library for BLE

// Wi-Fi properties
const char* ssid = "YOUR WiFI SSID";
const char* password = "your WIFI PASSWORD";

// Telegram bot properties
const char* botToken = "Your telegram bot toke";
const char* chatID = "your telegram ID";

// BLE properties
static const char* sensorAddress = "change this with your sensor MAC address";
int scanTime = 10; // Scanning time in seconds
NimBLEScan* pBLEScan;

// Threshold values for X
const float closedMinX = -0.16;
const float closedMaxX = 0.20;
const float openMinX = -0.90;
const float openMaxX = -0.17;

bool doorClosed = false;
bool doorOpen = false;
unsigned long lastChangeTime = 0; // Time of the last state change
const unsigned long debounceDelay = 15000; // Debounce period of 15 seconds

// Function to send a message on Telegram
void sendTelegramMessage(const String &message) {
    if (WiFi.status() == WL_CONNECTED) {
        WiFiClientSecure client;
        HTTPClient https;

        client.setInsecure(); // Use only for testing to avoid certificate checks
        String url = "https://api.telegram.org/bot";
        url += botToken;
        url += "/sendMessage?chat_id=";
        url += chatID;
        url += "&text=";
        url += message;

        https.begin(client, url);
        int httpCode = https.GET();
        if (httpCode > 0) {
            String payload = https.getString();
            Serial.println(payload);
        } else {
            Serial.println("Error on HTTP request");
        }
        https.end();
    }
}

// Defining the class for handling found devices
class MyAdvertisedDeviceCallbacks: public NimBLEAdvertisedDeviceCallbacks {
    void onResult(NimBLEAdvertisedDevice* advertisedDevice) {
        // Check if the device has the required MAC address
        if (advertisedDevice->getAddress().toString() == sensorAddress) {
            // Extract data from the advertisement packet
            std::string serviceData = advertisedDevice->getServiceData();

            // Extract data for the X and Y axes
            if (serviceData.length() >= 10) { // Ensure data length is at least 10 bytes
                // Correctly combine bytes for X and Y
                int16_t x = (int16_t)((serviceData[5] << 8) | (serviceData[4] & 0xFF));
                float xValue = x / 256.0;

                // Print only X and Y values
                Serial.print("X: ");
                Serial.println(xValue);

                unsigned long currentTime = millis();
                // Check the value of X and send a message on Telegram
                if ((xValue >= closedMinX && xValue <= closedMaxX) || xValue == -1.00) { // Added condition for exact equality with -1.00
                    if (!doorClosed && (currentTime - lastChangeTime > debounceDelay)) {
                        sendTelegramMessage("Garage door closed!");
                        doorClosed = true;
                        doorOpen = false;
                        lastChangeTime = currentTime;
                    }
                } else if (xValue >= openMinX && xValue <= openMaxX) {
                    if (!doorOpen && (currentTime - lastChangeTime > debounceDelay)) {
                        sendTelegramMessage("Garage door open!");
                        doorOpen = true;
                        doorClosed = false;
                        lastChangeTime = currentTime;
                    }
                }
            }
        }
    }
};

void setup() {
    Serial.begin(115200);

    // Connecting to Wi-Fi
    WiFi.begin(ssid, password);
    while (WiFi.status() != WL_CONNECTED) {
        delay(1000);
        Serial.println("Connecting to WiFi...");
    }
    Serial.println("Connected to WiFi");

    NimBLEDevice::init("");
    pBLEScan = NimBLEDevice::getScan(); // Initialize scanning
    pBLEScan->setAdvertisedDeviceCallbacks(new MyAdvertisedDeviceCallbacks());
    pBLEScan->setInterval(100); // Reduce scan interval
    pBLEScan->setWindow(99); // Increase scan window
    pBLEScan->setActiveScan(false); // Passive scanning
}

void loop() {
    // Scan for devices
    NimBLEScanResults foundDevices = pBLEScan->start(scanTime, false);
    pBLEScan->clearResults(); // Free memory
    delay(3000); // Wait for 3 seconds before next scan
}
